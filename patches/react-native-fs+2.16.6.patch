diff --git a/node_modules/react-native-fs/RNFSManager.h b/node_modules/react-native-fs/RNFSManager.h
index 8ef10e4..907069d 100644
--- a/node_modules/react-native-fs/RNFSManager.h
+++ b/node_modules/react-native-fs/RNFSManager.h
@@ -16,4 +16,6 @@ typedef void (^CompletionHandler)(void);

 +(void)setCompletionHandlerForIdentifier: (NSString *)identifier completionHandler: (CompletionHandler)completionHandler;

+pthread_mutex_t *tj_HEICEncodingLock(void);
+
 @end
diff --git a/node_modules/react-native-fs/RNFSManager.m b/node_modules/react-native-fs/RNFSManager.m
index c443d20..bad331e 100755
--- a/node_modules/react-native-fs/RNFSManager.m
+++ b/node_modules/react-native-fs/RNFSManager.m
@@ -23,6 +23,7 @@

 #import <CommonCrypto/CommonDigest.h>
 #import <Photos/Photos.h>
+#include <pthread.h>


 @interface RNFSManager()
@@ -39,6 +40,16 @@ @implementation RNFSManager

 RCT_EXPORT_MODULE();

+pthread_mutex_t *tj_HEICEncodingLock(void)
+{
+    static pthread_mutex_t lock;
+    static dispatch_once_t onceToken;
+    dispatch_once(&onceToken, ^{
+        pthread_mutex_init(&lock, nil);
+    });
+    return &lock;
+}
+
 - (dispatch_queue_t)methodQueue
 {
   return dispatch_queue_create("pe.lum.rnfs", DISPATCH_QUEUE_SERIAL);
@@ -764,7 +775,7 @@ + (BOOL)requiresMainQueueSetup
  * width and height. Also the resizeMode will be considered.
  */
 RCT_EXPORT_METHOD(copyAssetsFileIOS: (NSString *) imageUri
-                  toFilepath: (NSString *) destination
+                  toFilepath: (NSString *) imageDestination
                   width: (NSInteger) width
                   height: (NSInteger) height
                   scale: (CGFloat) scale
@@ -826,11 +837,39 @@ + (BOOL)requiresMainQueueSetup
                                               contentMode:contentMode
                                                   options:imageOptions
                                             resultHandler:^(UIImage *result, NSDictionary<NSString *, id> *info) {
-        if (result) {
+        if (result && [imageDestination rangeOfString:@".HEIC"].location == NSNotFound) {

             NSData *imageData = UIImageJPEGRepresentation(result, compression );
-            [imageData writeToFile:destination atomically:YES];
-            resolve(destination);
+            [imageData writeToFile:imageDestination atomically:YES];
+            resolve(imageDestination);
+
+        } else if (result) {
+
+            // extract source metadata https://stackoverflow.com/a/12478773
+            CGImageSourceRef source = CGImageSourceCreateWithData((CFDataRef)UIImageJPEGRepresentation(result, 1), NULL);
+            NSDictionary* metadata = (NSDictionary *)CFBridgingRelease(CGImageSourceCopyPropertiesAtIndex(source, 0, NULL));
+            CFRelease(source);
+
+            // set compression qualtity to best
+            NSMutableDictionary *options = [metadata mutableCopy];
+            [options setObject:@1 forKey:(__bridge NSString *)kCGImageDestinationLossyCompressionQuality];
+
+            NSData *imageData = nil;
+            NSMutableData *destinationData = [NSMutableData new];
+            CGImageDestinationRef destination = CGImageDestinationCreateWithData((__bridge CFMutableDataRef)destinationData, (__bridge CFStringRef)AVFileTypeHEIC, 1, NULL);
+
+            // iOS devices seem to corrupt image data when concurrently creating HEIC images.
+            // Locking to ensure HEIC creation doesn't occur concurrently.
+            pthread_mutex_t *lock = tj_HEICEncodingLock();
+            pthread_mutex_lock(lock);
+
+            CGImageDestinationAddImage(destination, result.CGImage, (__bridge CFDictionaryRef)options);
+            CGImageDestinationFinalize(destination);
+            imageData = destinationData;
+
+            [imageData writeToFile:imageDestination atomically:YES];
+            resolve(imageDestination);
+            CFRelease(destination);

         } else {
             NSMutableDictionary* details = [NSMutableDictionary dictionary];
